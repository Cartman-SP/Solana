import os
import sys
import django
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from mainapp.models import Token, Twitter
from asgiref.sync import sync_to_async
import asyncio

async def clean_empty_twitter_tokens():
    """–û—á–∏—â–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å –ø—É—Å—Ç—ã–º Twitter –∏–º–µ–Ω–µ–º '@'"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —Å Twitter –∏–º–µ–Ω–µ–º "@"
        empty_twitter_tokens = await sync_to_async(list)(
            Token.objects.filter(twitter__name="@")
        )
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(empty_twitter_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ —Å Twitter –∏–º–µ–Ω–µ–º '@'")
        print("=" * 80)
        
        if not empty_twitter_tokens:
            print("‚úÖ –¢–æ–∫–µ–Ω—ã —Å –ø—É—Å—Ç—ã–º Twitter –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
        print("üìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–ø–µ—Ä–≤—ã–µ 10):")
        for i, token in enumerate(empty_twitter_tokens[:10]):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                dev_address = token.dev.adress[:8] + "..." if token.dev.adress else "Unknown"
                created_str = token.created_at.strftime('%Y-%m-%d %H:%M:%S') if token.created_at else "Unknown"
                print(f"  ‚Ä¢ {token.address[:8]}... | Dev: {dev_address} | Created: {created_str}")
            except Exception as e:
                print(f"  ‚Ä¢ {token.address[:8]}... | –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        if len(empty_twitter_tokens) > 10:
            print(f"  ... –∏ –µ—â–µ {len(empty_twitter_tokens) - 10} —Ç–æ–∫–µ–Ω–æ–≤")
        
        print("=" * 80)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è twitter = null
        updated_count = 0
        error_count = 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º bulk_update –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        tokens_to_update = []
        for token in empty_twitter_tokens:
            try:
                token.twitter = None
                tokens_to_update.append(token)
            except Exception as e:
                error_count += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞ {token.address[:8]}...: {e}")
        
        if tokens_to_update:
            # –í—ã–ø–æ–ª–Ω—è–µ–º bulk_update
            await sync_to_async(Token.objects.bulk_update)(tokens_to_update, ['twitter'])
            updated_count = len(tokens_to_update)
            print(f"‚úÖ –ú–∞—Å—Å–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {updated_count}")
        
        print("=" * 80)
        print(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ: {updated_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(empty_twitter_tokens)}")
        
        # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å Twitter –æ–±—ä–µ–∫—Ç—ã —Å –∏–º–µ–Ω–µ–º "@" –µ—Å–ª–∏ –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        await cleanup_empty_twitter_objects()
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def cleanup_empty_twitter_objects():
    """–£–¥–∞–ª—è–µ—Ç Twitter –æ–±—ä–µ–∫—Ç—ã —Å –∏–º–µ–Ω–µ–º '@' –µ—Å–ª–∏ –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º Twitter –æ–±—ä–µ–∫—Ç—ã —Å –∏–º–µ–Ω–µ–º "@"
        empty_twitter_objects = await sync_to_async(list)(
            Twitter.objects.filter(name="@")
        )
        
        if not empty_twitter_objects:
            print("‚úÖ Twitter –æ–±—ä–µ–∫—Ç—ã —Å –∏–º–µ–Ω–µ–º '@' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\nüóëÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(empty_twitter_objects)} Twitter –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏–º–µ–Ω–µ–º '@'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –æ–Ω–∏ –≥–¥–µ-—Ç–æ –µ—â–µ
        deleted_count = 0
        for twitter_obj in empty_twitter_objects:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω—ã —Å —ç—Ç–∏–º Twitter
                tokens_count = await sync_to_async(Token.objects.filter(twitter=twitter_obj).count)()
                
                if tokens_count == 0:
                    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º Twitter –æ–±—ä–µ–∫—Ç
                    delete_twitter = sync_to_async(twitter_obj.delete)
                    await delete_twitter()
                    deleted_count += 1
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π Twitter –æ–±—ä–µ–∫—Ç: {twitter_obj.name}")
                else:
                    print(f"‚ö†Ô∏è Twitter –æ–±—ä–µ–∫—Ç '{twitter_obj.name}' –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {tokens_count} —Ç–æ–∫–µ–Ω–∞—Ö")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Twitter –æ–±—ä–µ–∫—Ç–∞ {twitter_obj.name}: {e}")
        
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö Twitter –æ–±—ä–µ–∫—Ç–æ–≤: {deleted_count}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Twitter –æ–±—ä–µ–∫—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø—É—Å—Ç—ã–º Twitter...")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    await clean_empty_twitter_tokens()
    
    print("=" * 80)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üèÅ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(main()) 