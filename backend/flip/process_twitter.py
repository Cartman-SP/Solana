import asyncio
import aiohttp
import os
import sys
import django
import re
from typing import Optional, List
import time

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from asgiref.sync import sync_to_async
from mainapp.models import Token, Twitter

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
MAX_CONCURRENT_REQUESTS = 20
REQUEST_DELAY = 1  # 100ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
IPFS_GATEWAY = "http://205.172.58.34/ipfs/"
IRYS_NODES = [
    "https://node1.irys.xyz/",
    "https://node2.irys.xyz/",
    "https://uploader.irys.xyz/"
]

# Telegram –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_BOT_TOKEN = "8354390669:AAEtYDTTfEkPp7Bc-QvlOhNp5Vn6fs0a9pg"
TELEGRAM_USER_IDS = [612594627, 784111198]
MAX_RETRIES = 3

# Twitter API –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TW_API_KEY = "new1_cdb5e73eb7174341be73ad05d22d69d9"
TW_BASE = "https://api.twitterapi.io"
TW_HEADERS = {"X-API-Key": TW_API_KEY}

class TokenProcessor:
    def __init__(self):
        self.semaphore = asyncio.Semaphore(MAX_CONCURRENT_REQUESTS)
        self.token_semaphore = asyncio.Semaphore(MAX_CONCURRENT_REQUESTS)
        self.session = None
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=10),
            connector=aiohttp.TCPConnector(limit=MAX_CONCURRENT_REQUESTS)
        )
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def get_tokens_batch(self, limit: int = 20) -> List[Token]:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞—Ç—á —Ç–æ–∫–µ–Ω–æ–≤ —Å twitter_got = False, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)"""
        tokens = await sync_to_async(list)(
            Token.objects.filter(twitter_got=False).order_by('-created_at')[:limit]
        )
        return tokens
    
    async def get_twitter_username(self, community_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å Twitter username –∏–∑ community_id"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ community
            url = f"{TW_BASE}/twitter/community/info"
            params = {"community_id": community_id}
            
            async with self.session.get(url, headers=TW_HEADERS, params=params, timeout=aiohttp.ClientTimeout(total=5)) as response:
                if response.status == 200:
                    data = await response.json()
                    community_info = data.get("community_info", {})
                    
                    # –ò—â–µ–º username –≤ creator –∏–ª–∏ first_member
                    for user_key in ["creator", "first_member"]:
                        user_data = community_info.get(user_key, {})
                        username = user_data.get("screen_name") or user_data.get("userName") or user_data.get("username")
                        if username:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Twitter username: @{username} –∏–∑ {user_key}")
                            return f"@{username}"
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ info, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ members
            url = f"{TW_BASE}/twitter/community/members"
            params = {"community_id": community_id, "limit": 1}
            
            async with self.session.get(url, headers=TW_HEADERS, params=params, timeout=aiohttp.ClientTimeout(total=5)) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    # –ò—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –æ—Ç–≤–µ—Ç–∞
                    members = []
                    for key in ["members", "data", "users"]:
                        if key in data and isinstance(data[key], list):
                            members.extend(data[key])
                    
                    if members:
                        user_data = members[0]
                        username = user_data.get("screen_name") or user_data.get("userName") or user_data.get("username")
                        if username:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Twitter username: @{username} –∏–∑ members")
                            return f"@{username}"
            
            print(f"‚ùå Twitter username –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è community {community_id}")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Twitter username: {e}")
            return None
    
    async def create_or_get_twitter(self, username: str) -> Optional[Twitter]:
        """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å Twitter –∑–∞–ø–∏—Å—å"""
        try:
            twitter, created = await sync_to_async(Twitter.objects.get_or_create)(name=username)
            if created:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è Twitter –∑–∞–ø–∏—Å—å: {username}")
            else:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è Twitter –∑–∞–ø–∏—Å—å: {username}")
            return twitter
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø–æ–ª—É—á–µ–Ω–∏–∏ Twitter: {e}")
            return None
    
    async def send_telegram_notification(self, token_mint: str,uri: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        message = f"–ø—Ä–æ–±–ª–µ–º–∞ —Å –º–µ—Ç–æ–π, {uri}, https://trade.padre.gg/trade/solana/{token_mint}"
        
        for user_id in TELEGRAM_USER_IDS:
            try:
                url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
                data = {
                    "chat_id": user_id,
                    "text": message,
                    "parse_mode": "HTML"
                }
                
                async with self.session.post(url, json=data) as response:
                    if response.status == 200:
                        print(f"üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {response.status}")
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def increment_retries(self, token: Token) -> None:
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞"""
        try:
            new_retries = token.retries + 1
            await sync_to_async(Token.objects.filter(id=token.id).update)(retries=new_retries)
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {new_retries}/{MAX_RETRIES} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token.name}")
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            if new_retries >= MAX_RETRIES:
                print(f"üö® –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token.name}, –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram")
                await self.send_telegram_notification(token.address,token.uri)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫: {e}")
    
    def extract_ipfs_hash(self, uri: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å IPFS —Ö–µ—à –∏–∑ URI"""
        ipfs_patterns = [
            r'https://ipfs\.io/ipfs/([a-zA-Z0-9]+)',
            r'https://gateway\.pinata\.cloud/ipfs/([a-zA-Z0-9]+)'
        ]
        
        for pattern in ipfs_patterns:
            match = re.search(pattern, uri)
            if match:
                return match.group(1)
        return None
    
    def is_irys_uri(self, uri: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URI Irys —Å—Å—ã–ª–∫–æ–π"""
        return 'irys' in uri.lower()
    
    async def fetch_metadata(self, url: str, description: str = "") -> Optional[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞–≥—Ä—É–∑–∫–∏"""
        async with self.semaphore:
            try:
                print(f"–ó–∞–ø—Ä–æ—Å –∫ {description}: {url}")
                async with self.session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç {description}")
                        return data
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ {response.status} –æ—Ç {description}")
                        return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {description}: {e}")
                return None
            finally:
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–¥–æ—Å–∞
                await asyncio.sleep(REQUEST_DELAY)
    
    async def process_ipfs_uri(self, uri: str) -> Optional[dict]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å IPFS URI —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —à–ª—é–∑"""
        ipfs_hash = self.extract_ipfs_hash(uri)
        if not ipfs_hash:
            return None
        
        gateway_url = f"{IPFS_GATEWAY}{ipfs_hash}"
        return await self.fetch_metadata(gateway_url, f"IPFS —à–ª—é–∑ ({ipfs_hash})")
    
    async def process_irys_uri(self, uri: str) -> Optional[dict]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å Irys URI —á–µ—Ä–µ–∑ –æ–±–∞ —É–∑–ª–∞"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ URI
        if 'irys.xyz' in uri:
            path = uri.split('irys.xyz/')[-1] if 'irys.xyz/' in uri else ''
        else:
            path = uri.split('/')[-1] if '/' in uri else ''
        
        if not path:
            return None
        
        # –ü—Ä–æ–±—É–µ–º –æ–±–∞ —É–∑–ª–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for i, node in enumerate(IRYS_NODES):
            node_url = f"{node}{path}"
            task = self.fetch_metadata(node_url, f"Irys node{i+1}")
            tasks.append(task)
        
        # –ñ–¥–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        for i, result in enumerate(results):
            if isinstance(result, dict):
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç Irys node{i+1}")
                return result
        
        return None
    
    async def process_regular_uri(self, uri: str) -> Optional[dict]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ã—á–Ω—ã–π URI"""
        return await self.fetch_metadata(uri, "–æ–±—ã—á–Ω—ã–π URI")
    
    async def process_token(self, token: Token) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω"""
        print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–∫–µ–Ω: {token.name} ({token.symbol})")
        print(f"URI: {token.uri}")
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∏: {token.retries}/{MAX_RETRIES}")
        
        if not token.uri:
            print("‚ùå URI –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return
        
        metadata = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø URI –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        if self.extract_ipfs_hash(token.uri):
            print("üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω IPFS URI, –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —à–ª—é–∑")
            metadata = await self.process_ipfs_uri(token.uri)
        elif self.is_irys_uri(token.uri):
            print("üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω Irys URI, –∏—Å–ø–æ–ª—å–∑—É—é –æ–±–∞ —É–∑–ª–∞")
            metadata = await self.process_irys_uri(token.uri)
        else:
            print("üîó –û–±—ã—á–Ω—ã–π URI, –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å")
            metadata = await self.process_regular_uri(token.uri)
            if not metadata:
                community_id = await self.fallback_community_id_from_pumpfun(token.address)
        
        
        if metadata:
            print(f"üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")
            # –ò—â–µ–º community_id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            community_id = self.extract_community_id(metadata)
            if not community_id:
                print("‚ùå Community ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É—é —á–µ—Ä–µ–∑ pump.fun API")
                community_id = await self.fallback_community_id_from_pumpfun(token.address)

            if community_id:
                print(f"üèòÔ∏è Community ID: {community_id}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º community_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self.save_community_id(token, community_id)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å Twitter username
                try:
                    twitter_username = await self.get_twitter_username(community_id)
                    if twitter_username:
                        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º Twitter –∑–∞–ø–∏—Å—å
                        twitter = await self.create_or_get_twitter(twitter_username)
                        if twitter:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —Å Twitter
                            await self.update_token_twitter(token, twitter)
                            print(f"‚úÖ Twitter –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {twitter_username}")
                        else:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å Twitter –∑–∞–ø–∏—Å—å –¥–ª—è {twitter_username}")
                            # Community –Ω–∞–π–¥–µ–Ω, –Ω–æ Twitter –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                            print(f"üíæ Community ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ Twitter –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–º–µ—á–∞—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
                            await self.mark_token_processed(token, twitter_got=True, processed=True)
                    else:
                        print(f"‚ùå Twitter username –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è community {community_id}")
                        # Community –Ω–∞–π–¥–µ–Ω, –Ω–æ Twitter –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                        print(f"üíæ Community ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ Twitter –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–º–µ—á–∞—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
                        await self.mark_token_processed(token, twitter_got=True, processed=True)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Twitter username: {e}")
                    # Community –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Twitter - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                    print(f"üíæ Community ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Twitter - –ø–æ–º–µ—á–∞—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
                    await self.mark_token_processed(token, twitter_got=True, processed=True)
            else:
                print("‚ùå Community ID –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –Ω–∏ —á–µ—Ä–µ–∑ pump.fun API")
                # –ï—Å–ª–∏ community_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                await self.mark_token_processed(token, twitter_got=True, processed=True)
        else:
            print("‚ùå –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (None)")
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            await self.increment_retries(token)
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            if token.retries >= MAX_RETRIES:
                print(f"üö® –¢–æ–∫–µ–Ω {token.name} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫, –ø–æ–º–µ—á–∞—é –∫–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
                await self.mark_token_processed(token, twitter_got=True, processed=True)
            else:
                print(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {token.name} –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    def extract_community_id(self, metadata: dict) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å community_id —Ç–æ–ª—å–∫–æ –∏–∑ —Å—Å—ã–ª–æ–∫ –≤–∏–¥–∞ https://x.com/i/communities/<digits>/.

        –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –∏—â–µ–º —à–∞–±–ª–æ–Ω —Å —á–∏—Å–ª–æ–≤—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.
        """
        if not isinstance(metadata, dict):
            return None

        pattern = re.compile(r"https?://(?:www\.)?x\.com/i/communities/(\d+)/?", re.IGNORECASE)

        def scan_string(value: str) -> Optional[str]:
            match = pattern.search(value)
            if match:
                cid = match.group(1)
                print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω community_id –∏–∑ x.com —Å—Å—ã–ª–∫–∏: {cid}")
                return cid
            return None

        def walk(node) -> Optional[str]:
            if isinstance(node, dict):
                for v in node.values():
                    res = walk(v)
                    if res:
                        return res
            elif isinstance(node, list):
                for v in node:
                    res = walk(v)
                    if res:
                        return res
            elif isinstance(node, str):
                return scan_string(node)
            return None

        print("üîç –ò—â—É —Å—Å—ã–ª–∫—É x.com/i/communities/<digits>/ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
        return walk(metadata)

    async def fetch_pumpfun_coin(self, mint: str) -> Optional[dict]:
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å coin-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å pump.fun (frontend API)."""
        url = f"https://frontend-api-v3.pump.fun/coins/{mint}"
        headers = {
            "Accept": "application/json",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) aiohttp-client",
            "Accept-Language": "ru,en;q=0.9",
        }
        async with self.semaphore:
            try:
                async with self.session.get(url, headers=headers, timeout=aiohttp.ClientTimeout(total=8)) as response:
                    if response.status == 200:
                        return await response.json()
                    print(f"‚ùå pump.fun API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status} –¥–ª—è {mint}")
                    return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ pump.fun API: {e}")
                return None
            finally:
                await asyncio.sleep(REQUEST_DELAY)

    def extract_community_id_from_obj(self, obj) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å community_id –∏–∑ –ª—é–±–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∏—â–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ø—É—Ç—è–º /community/<id> –∏–ª–∏ /communities/<id>."""
        patterns = (
            r"/communities/([A-Za-z0-9_-]+)",
            r"/community/([A-Za-z0-9_-]+)",
        )

        def scan_string(value: str) -> Optional[str]:
            for pattern in patterns:
                m = re.search(pattern, value)
                if m:
                    return m.group(1)
            return None

        def walk(node) -> Optional[str]:
            if isinstance(node, dict):
                for _, v in node.items():
                    res = walk(v)
                    if res:
                        return res
            elif isinstance(node, list):
                for v in node:
                    res = walk(v)
                    if res:
                        return res
            elif isinstance(node, str):
                return scan_string(node)
            return None

        return walk(obj)

    async def fallback_community_id_from_pumpfun(self, mint: str) -> Optional[str]:
        """–§–æ–ª–±—ç–∫: –ø–æ–ª—É—á–∏—Ç—å community_id —á–µ—Ä–µ–∑ pump.fun API."""
        data = await self.fetch_pumpfun_coin(mint)
        if not data:
            return None
        cid = self.extract_community_id_from_obj(data)
        if cid:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω community_id —á–µ—Ä–µ–∑ pump.fun API: {cid}")
        return cid
    
    async def save_community_id(self, token: Token, community_id: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å community_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await sync_to_async(Token.objects.filter(id=token.id).update)(
                community_id=community_id
            )
            print(f"üíæ Community ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É: {community_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ community_id: {e}")
    
    async def update_token_twitter(self, token: Token, twitter: Twitter) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω —Å Twitter –∑–∞–ø–∏—Å—å—é"""
        try:
            await sync_to_async(Token.objects.filter(id=token.id).update)(
                twitter=twitter
            )
            print(f"üíæ Twitter –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {twitter.name}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Twitter: {e}")
    
    async def mark_token_processed(self, token: Token, twitter_got: bool = True, processed: bool = False) -> None:
        """–ü–æ–º–µ—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
        try:
            update_data = {'twitter_got': twitter_got}
            if processed:
                update_data['processed'] = True
            
            await sync_to_async(Token.objects.filter(id=token.id).update)(**update_data)
            
            if processed:
                print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π (twitter_got=True, processed=True)")
            else:
                print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è twitter (twitter_got=True)")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
    
    async def process_batch(self, batch_size: int = 200):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞—Ç—á —Ç–æ–∫–µ–Ω–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞ –∏–∑ {batch_size} —Ç–æ–∫–µ–Ω–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        tokens = await self.get_tokens_batch(batch_size)
        
        if not tokens:
            print("üì≠ –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
        async def process_with_limit(t: Token):
            async with self.token_semaphore:
                await self.process_token(t)

        tasks = []
        for i, token in enumerate(tokens, 1):
            print(f"üìù –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {i}/{len(tokens)}: {token.name}")
            task = asyncio.create_task(process_with_limit(token))
            tasks.append(task)
        
        print(f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(tasks)} —Ç–æ–∫–µ–Ω–æ–≤...")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        completed_count = 0
        failed_count = 0
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.as_completed –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            for coro in asyncio.as_completed(tasks):
                try:
                    await coro
                    completed_count += 1
                    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_count}/{len(tasks)} —Ç–æ–∫–µ–Ω–æ–≤")
                except Exception as e:
                    failed_count += 1
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
                    print(f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {failed_count}/{len(tasks)} —Ç–æ–∫–µ–Ω–æ–≤")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        
        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {completed_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} —Å –æ—à–∏–±–∫–∞–º–∏ –∏–∑ {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤...")
    
    async with TokenProcessor() as processor:
        while True:
            try:
                await processor.process_batch(20)
                print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º...")
                await asyncio.sleep(5)
            except KeyboardInterrupt:
                print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(10)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
