#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç IPFS –∫–ª–∏–µ–Ω—Ç–∞
"""

import asyncio
import aioipfs
from create import IPFSClient

async def test_ipfs_client():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—à IPFS –∫–ª–∏–µ–Ω—Ç"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IPFS –∫–ª–∏–µ–Ω—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = IPFSClient()
    
    if not client.client:
        print("‚ùå IPFS –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    print(f"‚úÖ IPFS –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {type(client.client)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –∫–ª–∏–µ–Ω—Ç–∞
    methods = ['connect', 'cat', 'version', 'disconnect']
    for method in methods:
        if hasattr(client.client, method):
            print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    try:
        connected = await client.ensure_connection()
        if connected:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
    
    return True

async def test_direct_aioipfs():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π aioipfs –∫–ª–∏–µ–Ω—Ç"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ aioipfs –∫–ª–∏–µ–Ω—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ–π –∫–ª–∏–µ–Ω—Ç
        client = aioipfs.AsyncIPFS(host='127.0.0.1', port=5001)
        print(f"‚úÖ –ü—Ä—è–º–æ–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {type(client)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        methods = ['connect', 'cat', 'version', 'disconnect']
        for method in methods:
            if hasattr(client, method):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        try:
            await client.connect()
            print("‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
            try:
                version = await client.version()
                print(f"üìã –í–µ—Ä—Å–∏—è IPFS: {version}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é: {e}")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
            if hasattr(client, 'disconnect'):
                await client.disconnect()
                print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä—è–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    await test_ipfs_client()
    
    # –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    await test_direct_aioipfs()
    
    print("\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

if __name__ == "__main__":
    asyncio.run(main()) 