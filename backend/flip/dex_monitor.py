import asyncio
import websockets
import json
import os
import sys
import django
import aiohttp
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from mainapp.models import Token, Twitter
from asgiref.sync import sync_to_async

TW_API_KEY = "new1_cdb5e73eb7174341be73ad05d22d69d9"
TW_BASE = "https://api.twitterapi.io"
TW_HEADERS = {"X-API-Key": TW_API_KEY}

async def check_and_set_unique_community(token):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç unique_community –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –ï—Å–ª–∏ —É —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç community_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if not token.community_id or token.community_id == '':
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —Å —Ç–∞–∫–∏–º –∂–µ community_id, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        community_tokens = await sync_to_async(list)(
            Token.objects.filter(
                community_id=token.community_id,
                community_id__isnull=False,
                community_id__gt=''
            ).order_by('created_at')
        )
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω –≤ community, –æ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
        if len(community_tokens) == 1:
            token.unique_community = True
            await sync_to_async(token.save)()
            print(f"–¢–æ–∫–µ–Ω {token.address} - –ø–µ—Ä–≤—ã–π –≤ community {token.community_id}, –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã —Å —Ç–∞–∫–∏–º –∂–µ community_id
        has_older_tokens = any(
            t.community_id == token.community_id and 
            t.created_at < token.created_at and
            t.id != token.id
            for t in community_tokens
        )
        
        # –¢–æ–∫–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –µ—Å–ª–∏ –Ω–µ—Ç –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å —Ç–∞–∫–∏–º –∂–µ community_id
        is_unique = not has_older_tokens
        
        if token.unique_community != is_unique:
            token.unique_community = is_unique
            await sync_to_async(token.save)()
            status = "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π" if is_unique else "–Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π"
            print(f"–¢–æ–∫–µ–Ω {token.address} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ {status} –≤ community {token.community_id}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ unique_community –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token.address}: {e}")

async def get_twitter_username(session: aiohttp.ClientSession, community_id: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å Twitter username –∏–∑ community_id (–ª–æ–≥–∏–∫–∞ –∏–∑ process_twitter.py)."""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ community
        url = f"{TW_BASE}/twitter/community/info"
        params = {"community_id": community_id}
        async with session.get(url, headers=TW_HEADERS, params=params, timeout=aiohttp.ClientTimeout(total=5)) as response:
            if response.status == 200:
                data = await response.json()
                community_info = data.get("community_info", {})
                # –ò—â–µ–º username –≤ creator –∏–ª–∏ first_member
                for user_key in ["creator", "first_member"]:
                    user_data = community_info.get(user_key, {})
                    username = user_data.get("screen_name") or user_data.get("userName") or user_data.get("username")
                    if username:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω Twitter username: @{username} –∏–∑ {user_key}")
                        return f"@{username}"

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ info, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ members
        url = f"{TW_BASE}/twitter/community/members"
        params = {"community_id": community_id, "limit": 1}
        async with session.get(url, headers=TW_HEADERS, params=params, timeout=aiohttp.ClientTimeout(total=5)) as response:
            if response.status == 200:
                data = await response.json()
                # –ò—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –æ—Ç–≤–µ—Ç–∞
                members = []
                for key in ["members", "data", "users"]:
                    if key in data and isinstance(data[key], list):
                        members.extend(data[key])
                if members:
                    user_data = members[0]
                    username = user_data.get("screen_name") or user_data.get("userName") or user_data.get("username")
                    if username:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω Twitter username: @{username} –∏–∑ members")
                        return f"@{username}"

        print(f"‚ùå Twitter username –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è community {community_id}")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Twitter username: {e}")
        return None

def extract_community_id_from_data(data: dict) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç community_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è community_id:")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(data.keys())}")
        
        # –ò—â–µ–º community_id –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –¥–∞–Ω–Ω—ã—Ö
        community_id = data.get('community_id') or data.get('communityId') or data.get('community')
        
        if not community_id:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ socials –µ—Å–ª–∏ –µ—Å—Ç—å
            socials = data.get('socials', [])
            if isinstance(socials, list):
                print(f"   –ü—Ä–æ–≤–µ—Ä—è—é socials: {socials}")
                for social in socials:
                    if isinstance(social, dict):
                        url = social.get('url', '')
                        if isinstance(url, str) and "communities" in url.lower():
                            parts = url.rstrip("/").split("/")
                            if parts:
                                community_id = parts[-1].strip()
                                community_id = community_id.strip('.,;:!?()[]{}"\'')
                                if community_id:
                                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω community_id –≤ socials: {community_id}")
                                    return community_id
        
        # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–±: –∏—â–µ–º –≤ links –¥–ª—è Twitter
        if not community_id:
            links = data.get('links', [])
            if isinstance(links, list):
                print(f"   –ü—Ä–æ–≤–µ—Ä—è—é links: {links}")
                for link in links:
                    if isinstance(link, dict) and link.get('type') == 'twitter':
                        url = link.get('url', '')
                        print(f"   –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é Twitter URL: {url}")
                        if isinstance(url, str) and "communities" in url.lower():
                            parts = url.rstrip("/").split("/")
                            print(f"   –ß–∞—Å—Ç–∏ URL: {parts}")
                            if parts:
                                community_id = parts[-1].strip()
                                community_id = community_id.strip('.,;:!?()[]{}"\'')
                                if community_id:
                                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω community_id –≤ links: {community_id}")
                                    return community_id
        
        if not community_id:
            print(f"   ‚ùå community_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return community_id
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ community_id: {e}")
        return None

async def process_token_data(data: dict, http_session: aiohttp.ClientSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ç–≤–∏—Ç—Ç–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    try:
        # –ë–µ—Ä–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π
        token_address = data.get('tokenAddress') or data.get('mint')
        if not token_address:
            print("‚ùå –í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tokenAddress/mint")
            return
        
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–∫–µ–Ω: {token_address}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω
        token_exists = await sync_to_async(Token.objects.filter(address=token_address).exists)()
        
        if not token_exists:
            print(f"‚ùå –¢–æ–∫–µ–Ω {token_address} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token = await sync_to_async(Token.objects.select_related('twitter').get)(address=token_address)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º community_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–¥–µ–ª–∞–µ–º —ç—Ç–æ –¥–æ –ª—é–±—ã—Ö –≤—ã—Ö–æ–¥–æ–≤ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏)
        community_id = extract_community_id_from_data(data)
        if community_id:
            print(f"üîó –ù–∞–π–¥–µ–Ω community_id: {community_id}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º community_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            await sync_to_async(Token.objects.filter(id=token.id).update)(community_id=community_id)
            token.community_id = community_id
            # –û–±–Ω–æ–≤–ª—è–µ–º unique_community –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ç–≤–∏—Ç—Ç–µ—Ä–∞
            await check_and_set_unique_community(token)
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å community_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–≤–∏—Ç—Ç–µ—Ä
        has_twitter = getattr(token, 'twitter_id', None) is not None
        if has_twitter:
            print(f"‚úÖ –£ —Ç–æ–∫–µ–Ω–∞ {token_address} —É–∂–µ –µ—Å—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ")
            return

        # –ï—Å–ª–∏ community_id –Ω–∞–π–¥–µ–Ω ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username
        if community_id:
            username = await get_twitter_username(http_session, community_id)
            if username:
                twitter, _ = await sync_to_async(Twitter.objects.get_or_create)(name=username)
                await sync_to_async(Token.objects.filter(id=token.id).update)(twitter=twitter)
                print(f"‚úÖ –¢–≤–∏—Ç—Ç–µ—Ä {username} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–æ–∫–µ–Ω—É {token_address}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Twitter username –ø–æ community_id {community_id}")
        else:
            print("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –ø–æ–ø—ã—Ç–∫—É –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–≤–∏—Ç—Ç–µ—Ä–∞: –Ω–µ—Ç community_id")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")

async def dex_websocket_client():
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DEX –º–æ–Ω–∏—Ç–æ—Ä—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–≤–∏—Ç—Ç–µ—Ä–æ–≤"""
    uri = "ws://205.172.58.34/ws/"
    
    try:
        async with websockets.connect(uri) as websocket:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print("üì° –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Solana...")
            print("-" * 50)
            
            # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
            timeout = aiohttp.ClientTimeout(total=10)
            async with aiohttp.ClientSession(timeout=timeout) as http_session:
                # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                while True:
                    message = await websocket.recv()
                    data = json.loads(message)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    if 'data' not in data:
                        print("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", json.dumps(data, indent=2, ensure_ascii=False))
                        print("-" * 50)
                        continue
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤
                    token_data = data.get('data')
                    if isinstance(token_data, list):
                        for token_item in token_data:
                            print(json.dumps(token_item, indent=2, ensure_ascii=False))
                            print("-" * 50)
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
                            await process_token_data(token_item, http_session)
                    else:
                        print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:", json.dumps(data, indent=2, ensure_ascii=False))
                        
    except websockets.exceptions.ConnectionClosed:
        print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(dex_websocket_client())