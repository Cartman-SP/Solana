#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IPFS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

import ipfshttpclient
import asyncio
import json

def test_ipfs_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IPFS API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IPFS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã –∏ –∞–¥—Ä–µ—Å–∞ –¥–ª—è IPFS API
    ipfs_endpoints = [
        '/ip4/127.0.0.1/tcp/5001',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç
        '/ip4/127.0.0.1/tcp/5101',  # –í–∞—à —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç
        '/ip4/127.0.0.1/tcp/8080',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç
        '/ip4/0.0.0.0/tcp/5001',    # –í—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    ]
    
    for endpoint in ipfs_endpoints:
        try:
            print(f"\nüîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ IPFS API: {endpoint}")
            client = ipfshttpclient.connect(endpoint)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            try:
                version = client.version()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ {endpoint}")
                print(f"üìã –í–µ—Ä—Å–∏—è IPFS: {version}")
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ node
                try:
                    id_info = client.id()
                    print(f"üÜî Node ID: {id_info['ID']}")
                    print(f"üåê –ê–¥—Ä–µ—Å–∞: {id_info['Addresses']}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID: {e}")
                
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É
                try:
                    peers = client.swarm.peers()
                    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã: {len(peers)}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ä—ã: {e}")
                
                client.close()
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ IPFS: {e}")
                client.close()
                continue
                
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {endpoint}: {e}")
            continue
    
    print("\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É IPFS API endpoint")
    return False

def test_ipfs_gateways():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPFS gateways"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IPFS gateways...")
    
    import requests
    
    test_cid = "QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG"  # –¢–µ—Å—Ç–æ–≤—ã–π CID
    
    gateways = [
        f"http://127.0.0.1:8180/ipfs/{test_cid}",
        f"https://ipfs.io/ipfs/{test_cid}",
        f"https://gateway.pinata.cloud/ipfs/{test_cid}",
        f"https://cloudflare-ipfs.com/ipfs/{test_cid}",
    ]
    
    for gateway in gateways:
        try:
            print(f"üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º gateway: {gateway}")
            response = requests.get(gateway, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ Gateway —Ä–∞–±–æ—Ç–∞–µ—Ç: {gateway}")
                print(f"üìã –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
            else:
                print(f"‚ö†Ô∏è Gateway –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {gateway}")
        except Exception as e:
            print(f"‚ùå Gateway –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {gateway} - {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ IPFS...")
    
    # –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ API
    api_works = test_ipfs_connection()
    
    # –¢–µ—Å—Ç gateways
    test_ipfs_gateways()
    
    if api_works:
        print("\nüéâ IPFS API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    else:
        print("\n‚ùå IPFS API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –ó–∞–ø—É—â–µ–Ω –ª–∏ IPFS daemon?")
        print("   2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –ø–æ—Ä—Ç? (–æ–±—ã—á–Ω–æ 5001)")
        print("   3. –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ API? (ipfs config Addresses.API)")
        print("   4. –ù–µ—Ç –ª–∏ firewall –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏?") 