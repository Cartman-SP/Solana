#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IPFS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

import aioipfs
import asyncio
import json

async def test_ipfs_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IPFS API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ IPFS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è IPFS API
    ipfs_ports = [5001, 5101, 8080]  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π, –≤–∞—à —Ç–µ–∫—É—â–∏–π, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
    
    for port in ipfs_ports:
        try:
            print(f"\nüîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ IPFS API –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            client = aioipfs.AsyncIPFS(host='127.0.0.1', port=port)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            try:
                await client.connect()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ø–æ—Ä—Ç—É {port}")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
                try:
                    version = await client.version()
                    print(f"üìã –í–µ—Ä—Å–∏—è IPFS: {version}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é: {e}")
                
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É
                try:
                    peers = await client.swarm.peers()
                    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã: {len(peers)}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ä—ã: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç disconnect
                if hasattr(client, 'disconnect'):
                    await client.disconnect()
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Ä—Ç—É {port}: {e}")
                continue
                
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ—Ä—Ç–∞ {port}: {e}")
            continue
    
    print("\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É IPFS API –ø–æ—Ä—Ç—É")
    return False

def test_ipfs_gateways():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç IPFS gateways"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IPFS gateways...")
    
    import requests
    
    test_cid = "QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG"  # –¢–µ—Å—Ç–æ–≤—ã–π CID
    
    gateways = [
        f"http://127.0.0.1:8180/ipfs/{test_cid}",
        f"https://ipfs.io/ipfs/{test_cid}",
        f"https://gateway.pinata.cloud/ipfs/{test_cid}",
        f"https://cloudflare-ipfs.com/ipfs/{test_cid}",
    ]
    
    for gateway in gateways:
        try:
            print(f"üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º gateway: {gateway}")
            response = requests.get(gateway, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ Gateway —Ä–∞–±–æ—Ç–∞–µ—Ç: {gateway}")
                print(f"üìã –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
            else:
                print(f"‚ö†Ô∏è Gateway –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {gateway}")
        except Exception as e:
            print(f"‚ùå Gateway –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {gateway} - {e}")

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ IPFS...")
    
    # –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ API
    api_works = await test_ipfs_connection()
    
    # –¢–µ—Å—Ç gateways
    test_ipfs_gateways()
    
    if api_works:
        print("\nüéâ IPFS API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    else:
        print("\n‚ùå IPFS API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –ó–∞–ø—É—â–µ–Ω –ª–∏ IPFS daemon?")
        print("   2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –ø–æ—Ä—Ç? (–æ–±—ã—á–Ω–æ 5001)")
        print("   3. –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ API? (ipfs config Addresses.API)")
        print("   4. –ù–µ—Ç –ª–∏ firewall –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏?")

if __name__ == "__main__":
    asyncio.run(main()) 