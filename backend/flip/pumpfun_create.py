import asyncio
import websockets
import json
import aioipfs
from create import *

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π IPFS –∫–ª–∏–µ–Ω—Ç
ipfs_client = None

def setup_ipfs_client():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π IPFS –∫–ª–∏–µ–Ω—Ç"""
    global ipfs_client
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è IPFS API
    ipfs_ports = [5001, 5101, 8080]  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π, –≤–∞—à —Ç–µ–∫—É—â–∏–π, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
    
    for port in ipfs_ports:
        try:
            print(f"üîÑ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π IPFS –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ—Ä—Ç–∞ {port}")
            ipfs_client = aioipfs.AsyncIPFS(host='127.0.0.1', port=port)
            print(f"‚úÖ IPFS –∫–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ—Ä—Ç–∞ {port}")
            return ipfs_client
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ—Ä—Ç–∞ {port}: {e}")
            continue
    
    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å IPFS –∫–ª–∏–µ–Ω—Ç –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞")
    return None

async def subscribe():
    global ipfs_client
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º IPFS –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å IPFS –∫–ª–∏–µ–Ω—Ç–æ–º...")
    ipfs_client = setup_ipfs_client()
    
    if ipfs_client:
        print("‚úÖ IPFS –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("üìã IPFS –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º")
    else:
        print("‚ö†Ô∏è IPFS –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ HTTP")
    
    uri = "wss://pumpportal.fun/api/data"
    async with websockets.connect(uri) as websocket:
        print("üîå –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ PumpPortal WebSocket")
        
        # Subscribing to token creation events
        payload = {
            "method": "subscribeNewToken",
        }
        await websocket.send(json.dumps(payload))
        print("üì° –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤")
        
        async for message in websocket:
            data = json.loads(message)
            try:
                if 'uri' in data:
                    print(f"üÜï –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {data.get('mint', 'Unknown')}")
                    # –ü–µ—Ä–µ–¥–∞–µ–º IPFS –∫–ª–∏–µ–Ω—Ç –≤ process_create
                    asyncio.create_task(process_create(data, ipfs_client))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                pass

async def cleanup():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º IPFS –∫–ª–∏–µ–Ω—Ç"""
    global ipfs_client
    if ipfs_client:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ AsyncIPFS –æ–±—ä–µ–∫—Ç
            if hasattr(ipfs_client, 'disconnect'):
                await ipfs_client.disconnect()
                print("‚úÖ IPFS –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
            else:
                print("‚ö†Ô∏è IPFS –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç disconnect")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ IPFS –∫–ª–∏–µ–Ω—Ç–∞: {e}")

# Run the subscribe function
if __name__ == "__main__":
    try:
        asyncio.get_event_loop().run_until_complete(subscribe())
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        asyncio.get_event_loop().run_until_complete(cleanup())
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        asyncio.get_event_loop().run_until_complete(cleanup())