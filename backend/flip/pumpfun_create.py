import asyncio
import websockets
import json
import ipfshttpclient
from create import *

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π IPFS –∫–ª–∏–µ–Ω—Ç
ipfs_client = None

def setup_ipfs_client():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π IPFS –∫–ª–∏–µ–Ω—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    global ipfs_client
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã –∏ –∞–¥—Ä–µ—Å–∞ –¥–ª—è IPFS API
    ipfs_endpoints = [
        '/ip4/127.0.0.1/tcp/5001',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç
        '/ip4/127.0.0.1/tcp/5101',  # –í–∞—à —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç
        '/ip4/127.0.0.1/tcp/8080',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç
        '/ip4/0.0.0.0/tcp/5001',    # –í—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    ]
    
    for endpoint in ipfs_endpoints:
        try:
            print(f"üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ IPFS API: {endpoint}")
            ipfs_client = ipfshttpclient.connect(endpoint)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            try:
                ipfs_client.version()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ IPFS API: {endpoint}")
                return ipfs_client
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ IPFS: {e}")
                ipfs_client.close()
                ipfs_client = None
                continue
                
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {endpoint}: {e}")
            continue
    
    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É IPFS API endpoint")
    return None

async def subscribe():
    global ipfs_client
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º IPFS –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å IPFS –∫–ª–∏–µ–Ω—Ç–æ–º...")
    ipfs_client = setup_ipfs_client()
    
    if ipfs_client:
        print("‚úÖ IPFS –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å IPFS
            version = ipfs_client.version()
            print(f"üìã IPFS –≤–µ—Ä—Å–∏—è: {version}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ä–æ–≤
            peers = ipfs_client.swarm.peers()
            print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã: {len(peers)}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ IPFS —Å—Ç–∞—Ç—É—Å–∞: {e}")
    else:
        print("‚ö†Ô∏è IPFS –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ HTTP")
    
    uri = "wss://pumpportal.fun/api/data"
    async with websockets.connect(uri) as websocket:
        print("üîå –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ PumpPortal WebSocket")
        
        # Subscribing to token creation events
        payload = {
            "method": "subscribeNewToken",
        }
        await websocket.send(json.dumps(payload))
        print("üì° –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤")
        
        async for message in websocket:
            data = json.loads(message)
            try:
                if 'uri' in data:
                    print(f"üÜï –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {data.get('mint', 'Unknown')}")
                    # –ü–µ—Ä–µ–¥–∞–µ–º IPFS –∫–ª–∏–µ–Ω—Ç –≤ process_create
                    asyncio.create_task(process_create(data, ipfs_client))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                pass

# Run the subscribe function
if __name__ == "__main__":
    try:
        asyncio.get_event_loop().run_until_complete(subscribe())
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if ipfs_client:
            try:
                ipfs_client.close()
                print("‚úÖ IPFS –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
            except:
                pass
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if ipfs_client:
            try:
                ipfs_client.close()
                print("‚úÖ IPFS –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
            except:
                pass