import os
import sys
import django
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from mainapp.models import Twitter, Token
from asgiref.sync import sync_to_async
import asyncio

async def get_twitter_data_and_update(twitter_obj):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Twitter –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç ath –∏ total_trans –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç–æ–∫–µ–Ω–∞ —Å processed = True
        recent_dev_tokens = await sync_to_async(list)(
            Token.objects.filter(
                twitter=twitter_obj,
                processed=True
            ).order_by('-created_at')[:3]
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π ATH
        if recent_dev_tokens:
            avg_ath = sum(token.ath for token in recent_dev_tokens) / len(recent_dev_tokens)
        else:
            avg_ath = 0
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π total_trans –ø–æ —Ç–µ–º –∂–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ç–æ–∫–µ–Ω–∞–º
        if recent_dev_tokens:
            avg_total_trans = sum(token.total_trans for token in recent_dev_tokens) / len(recent_dev_tokens)
        else:
            avg_total_trans = 0

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        twitter_obj.ath = int(avg_ath)
        twitter_obj.total_trans = int(avg_total_trans)
        await sync_to_async(twitter_obj.save)()
        
        recent_tokens_info = []
        for token in recent_dev_tokens:
            recent_tokens_info.append({
                'name': token.address[:4] + '...' + token.address[-4:],  
                'ath': token.ath,
                'total_trans': token.total_trans
            })
            
        return {
            'name': twitter_obj.name,
            'ath': int(avg_ath),
            'total_trans': int(avg_total_trans),
            'total_tokens': max(1, twitter_obj.total_tokens),
            'whitelist': twitter_obj.whitelist,
            'blacklist': twitter_obj.blacklist,
            'recent_tokens': recent_tokens_info
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Twitter {twitter_obj.name}: {e}")
        return None

async def process_all_twitter_accounts():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ Twitter –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Twitter –∞–∫–∫–∞—É–Ω—Ç—ã
        all_twitter = await sync_to_async(list)(Twitter.objects.all())
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_twitter)} Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        print("=" * 80)
        
        processed_count = 0
        error_count = 0
        
        for twitter_obj in all_twitter:
            try:
                result = await get_twitter_data_and_update(twitter_obj)
                if result:
                    print(f"‚úÖ {result['name']} | ATH: {result['ath']} | Total Trans: {result['total_trans']} | Tokens: {result['total_tokens']}")
                    processed_count += 1
                else:
                    print(f"‚ùå {twitter_obj.name} | –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    error_count += 1
            except Exception as e:
                print(f"‚ùå {twitter_obj.name} | –û—à–∏–±–∫–∞: {e}")
                error_count += 1
        
        print("=" * 80)
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"üìä –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(all_twitter)}")
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    await process_all_twitter_accounts()
    
    print("=" * 80)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(main()) 