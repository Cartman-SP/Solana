from solders.keypair import Keypair
from solders.pubkey import Pubkey
from solders.instruction import Instruction, AccountMeta
from solders.transaction import Transaction
from solders.message import Message
from solders.hash import Hash
from solana.rpc.async_api import AsyncClient
import asyncio
import base64
import requests
import json
import hashlib

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SYSTEM_PROGRAM_ID = Pubkey.from_string("11111111111111111111111111111111")
PUMP_FUN_PROGRAM_ID = Pubkey.from_string("6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P")
TOKEN_PROGRAM_ID = Pubkey.from_string("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")
ASSOCIATED_TOKEN_PROGRAM_ID = Pubkey.from_string("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")
METADATA_PROGRAM_ID = Pubkey.from_string("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
PRIVATE_KEY = "ovDwkA2VFBHhgX9e9SkFghFjdaFiaDXtyXuTTrwKSA3UDiGsEvPtmhcvoQSxqtUYLSXVqMQQBri4dzpMoz56LUa"
RPC_URL = "https://wispy-little-river.solana-mainnet.quiknode.pro/134b4b837e97bb3711c20296010e32eff69ad1af/"

def get_associated_token_address(wallet_address: Pubkey, token_mint_address: Pubkey) -> Pubkey:
    """–í—ã—á–∏—Å–ª—è–µ–º –∞–¥—Ä–µ—Å –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–∞"""
    return Pubkey.find_program_address(
        [
            bytes(wallet_address),
            bytes(TOKEN_PROGRAM_ID),
            bytes(token_mint_address),
        ],
        ASSOCIATED_TOKEN_PROGRAM_ID
    )[0]

def get_metadata_account(mint_address: Pubkey) -> Pubkey:
    """–í—ã—á–∏—Å–ª—è–µ–º –∞–¥—Ä–µ—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
    return Pubkey.find_program_address(
        [
            b"metadata",
            bytes(METADATA_PROGRAM_ID),
            bytes(mint_address)
        ],
        METADATA_PROGRAM_ID
    )[0]

def get_bonding_curve_pda(token_mint: Pubkey) -> Pubkey:
    """–í—ã—á–∏—Å–ª—è–µ–º bonding curve PDA"""
    bonding_curve_seed = [b"bonding_curve", bytes(token_mint)]
    bonding_curve_pda, _ = Pubkey.find_program_address(bonding_curve_seed, PUMP_FUN_PROGRAM_ID)
    return bonding_curve_pda

async def check_token_state(token_mint_address: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    client = AsyncClient(RPC_URL)
    token_mint = Pubkey.from_string(token_mint_address)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω
        account_info = await client.get_account_info(token_mint)
        if account_info.value is None:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª –ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –≤ Raydium
        bonding_curve_pda = get_bonding_curve_pda(token_mint)
        bonding_curve_info = await client.get_account_info(bonding_curve_pda)
        
        if bonding_curve_info.value is None:
            print("‚ùå –¢–æ–∫–µ–Ω —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª –≤ Raydium –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ pump.fun")
            return False
        
        print("‚úÖ –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ pump.fun")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

async def create_pumpfun_buy_transaction(token_mint_address: str, amount_lamports: int):
    # 1. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á–∏
    payer = Keypair.from_base58_string(PRIVATE_KEY)
    token_mint = Pubkey.from_string(token_mint_address)
    client = AsyncClient(RPC_URL)

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not await check_token_state(token_mint_address):
        return None

    # 3. –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ PDA
    bonding_curve_pda = get_bonding_curve_pda(token_mint)
    user_ata = get_associated_token_address(payer.pubkey(), token_mint)
    metadata_account = get_metadata_account(token_mint)

    # 4. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π blockhash
    recent_blockhash_resp = await client.get_latest_blockhash()
    recent_blockhash = recent_blockhash_resp.value.blockhash

    # 5. –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    # –ü–æ—Ä—è–¥–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –≤–∞–∂–µ–Ω –¥–ª—è pump.fun!
    accounts = [
        AccountMeta(payer.pubkey(), is_signer=True, is_writable=True),  # 0. Payer
        AccountMeta(bonding_curve_pda, is_signer=False, is_writable=True),  # 1. Bonding Curve
        AccountMeta(token_mint, is_signer=False, is_writable=True),  # 2. Token Mint
        AccountMeta(user_ata, is_signer=False, is_writable=True),  # 3. User ATA
        AccountMeta(SYSTEM_PROGRAM_ID, is_signer=False, is_writable=False),  # 4. System Program
        AccountMeta(TOKEN_PROGRAM_ID, is_signer=False, is_writable=False),  # 5. Token Program
        AccountMeta(ASSOCIATED_TOKEN_PROGRAM_ID, is_signer=False, is_writable=False),  # 6. Associated Token Program
        AccountMeta(metadata_account, is_signer=False, is_writable=False),  # 7. Metadata Account
    ]

    # 6. –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    # –§–æ—Ä–º–∞—Ç: [–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏] + [amount (u64 little endian)]
    # –î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ "buy" –≤ pump.fun
    discriminator = hashlib.sha256(b"global:buy").digest()[:8]
    data = discriminator + amount_lamports.to_bytes(8, 'little')

    buy_instruction = Instruction(
        program_id=PUMP_FUN_PROGRAM_ID,
        data=data,
        accounts=accounts
    )

    # 7. –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ–∫—É–ø–∫–∏
    message = Message.new_with_blockhash(
        [buy_instruction],
        payer.pubkey(),
        Hash.from_string(str(recent_blockhash))
    )

    # 8. –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction = Transaction.new_unsigned(message)
    transaction.sign([payer], Hash.from_string(str(recent_blockhash)))

    return transaction

def simulate_bundle(transaction):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –±–∞–Ω–¥–ª–∞"""
    serialized_tx = base64.b64encode(bytes(transaction)).decode('utf-8')
    
    payload = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "simulateBundle",
        "params": [{
            "encodedTransactions": [serialized_tx],
            "options": {
                "skipPreflight": False,
                "maxSupportedTransactionVersion": 0
            }
        }]
    }
    
    try:
        response = requests.post(RPC_URL, json=payload, timeout=30)
        result = response.json()
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –±–∞–Ω–¥–ª–∞: {e}")
        return None

async def main():
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
        token_address = "7QPDEZri9JNJAgNg3D2EGqrNPwBCzk9DeadfUxUMpump"  
        buy_amount = 100000000  # 0.1 SOL –≤ lamports
        
        print("–°–æ–∑–¥–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ pump.fun...")
        transaction = await create_pumpfun_buy_transaction(token_address, buy_amount)
        
        if transaction is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
            return
        
        print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {len(transaction.message.instructions)}")
        print(f"–ï—Å—Ç—å –ø–æ–¥–ø–∏—Å—å: {len(transaction.signatures) > 0}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –±–∞–Ω–¥–ª
        print("–°–∏–º—É–ª–∏—Ä—É—é –±–∞–Ω–¥–ª...")
        result = simulate_bundle(transaction)
        
        if result and 'result' in result:
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏: {json.dumps(result, indent=2)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if 'error' in result:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {result['error']}")
            elif result['result']['value']['summary'].get('failed'):
                print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ —Å–∏–º—É–ª—è—Ü–∏—é")
                print(f"–û—à–∏–±–∫–∞: {result['result']['value']['summary']['failed']}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É 0x66
                if 'custom program error: 0x66' in str(result['result']['value']['summary']['failed']):
                    print("\nüîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ 0x66:")
                    print("–≠—Ç–∞ –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –æ–¥–Ω–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏—á–∏–Ω:")
                    print("1. –¢–æ–∫–µ–Ω —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª –≤ Raydium")
                    print("2. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                    print("3. –¢–æ–∫–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω")
                    print("4. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º bonding curve")
                    print("5. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ pump.fun")
            else:
                print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å.")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –±–∞–Ω–¥–ª–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())