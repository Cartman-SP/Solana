import asyncio
import subprocess
import sys
import os
import signal
import time

class ProcessManager:
    def __init__(self):
        self.processes = []
        self.running = True
        
    def start_process(self, script_name, description):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å"""
        try:
            script_path = os.path.join(os.path.dirname(__file__), script_name)
            process = subprocess.Popen(
                [sys.executable, script_path],
                stdout=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º stdout —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                stderr=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º stderr —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                universal_newlines=True,
                bufsize=0  # –û—Ç–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é
            )
            self.processes.append((process, description))
            print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω {description} (PID: {process.pid})")
            return process
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {description}: {e}")
            return None
    
    def start_all_processes(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–æ–∫–µ—Ç —Å–µ—Ä–≤–µ—Ä
        self.start_process("websocket_server.py", "–í–µ–±-—Å–æ–∫–µ—Ç —Å–µ—Ä–≤–µ—Ä")
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
        self.start_process("pumpfun.py", "PumpFun –º–æ–Ω–∏—Ç–æ—Ä")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        #self.start_process("live.py", "Live –ø–æ–ª—É—á–∞—Ç–µ–ª—å")
        self.start_process("create.py", "Create –ø–æ–ª—É—á–∞—Ç–µ–ª—å")
        
        print("\nüìä –í—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    def stop_all_processes(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º...")
        self.running = False
        
        for process, description in self.processes:
            try:
                process.terminate()
                process.wait(timeout=5)
                print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {description}")
            except subprocess.TimeoutExpired:
                process.kill()
                print(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {description}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {description}: {e}")
    
    def monitor_processes(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤—ã–≤–æ–¥"""
        while self.running:
            for process, description in self.processes[:]:
                if process.poll() is not None:
                    # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                    self.processes.remove((process, description))
                    print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {description} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                    
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                    if self.running:
                        print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {description}...")
                        script_name = description.split()[0].lower() + ".py"
                        if description == "–í–µ–±-—Å–æ–∫–µ—Ç —Å–µ—Ä–≤–µ—Ä":
                            script_name = "websocket_server.py"
                        new_process = self.start_process(script_name, description)
                        if new_process:
                            self.processes.append((new_process, description))
            
            time.sleep(1)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print("\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        self.stop_all_processes()
        sys.exit(0)

def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, lambda s, f: None)
    
    manager = ProcessManager()
    manager.signal_handler = manager.signal_handler
    signal.signal(signal.SIGINT, manager.signal_handler)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        manager.start_all_processes()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏—Ö —Ä–∞–±–æ—Ç—É
        manager.monitor_processes()
        
    except KeyboardInterrupt:
        manager.signal_handler(signal.SIGINT, None)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        manager.stop_all_processes()

if __name__ == "__main__":
    main() 