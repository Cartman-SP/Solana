import time
import psutil
import asyncio
from typing import Dict, List
import logging

logger = logging.getLogger(__name__)

class LoadMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ"""
    
    def __init__(self):
        self.start_time = time.time()
        self.metrics = {
            'active_users': 0,
            'active_tokens': 0,
            'requests_per_second': 0,
            'memory_usage_mb': 0,
            'cpu_usage_percent': 0,
            'network_connections': 0,
            'errors_per_minute': 0,
            'average_response_time': 0
        }
        self.response_times = []
        self.error_times = []
        self.user_start_times = {}
        
    def start_user_processing(self, user_id: str):
        """–û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_start_times[user_id] = time.time()
        self.metrics['active_users'] += 1
        
    def end_user_processing(self, user_id: str):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_start_times:
            processing_time = time.time() - self.user_start_times[user_id]
            self.response_times.append(processing_time)
            del self.user_start_times[user_id]
            self.metrics['active_users'] -= 1
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞
            if len(self.response_times) > 1000:
                self.response_times = self.response_times[-1000:]
    
    def log_response_time(self, response_time: float):
        """–ó–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞"""
        self.response_times.append(response_time)
        if len(self.response_times) > 1000:
            self.response_times = self.response_times[-1000:]
    
    def log_error(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É"""
        self.error_times.append(time.time())
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞
        if len(self.error_times) > 100:
            self.error_times = self.error_times[-100:]
    
    def update_metrics(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏"""
        current_time = time.time()
        elapsed = current_time - self.start_time
        
        # –ó–∞–ø—Ä–æ—Å—ã –≤ —Å–µ–∫—É–Ω–¥—É
        recent_requests = [t for t in self.response_times if current_time - t < 60]
        self.metrics['requests_per_second'] = len(recent_requests) / 60 if elapsed > 60 else len(recent_requests) / elapsed
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        if self.response_times:
            self.metrics['average_response_time'] = sum(self.response_times) / len(self.response_times)
        
        # –û—à–∏–±–∫–∏ –≤ –º–∏–Ω—É—Ç—É
        recent_errors = [t for t in self.error_times if current_time - t < 60]
        self.metrics['errors_per_minute'] = len(recent_errors)
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        process = psutil.Process()
        memory_info = process.memory_info()
        self.metrics['memory_usage_mb'] = memory_info.rss / 1024 / 1024
        self.metrics['cpu_usage_percent'] = process.cpu_percent()
        
        # –°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            self.metrics['network_connections'] = len(psutil.net_connections())
        except:
            self.metrics['network_connections'] = 0
    
    def get_load_report(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ –Ω–∞–≥—Ä—É–∑–∫–µ"""
        self.update_metrics()
        return {
            'elapsed_time': time.time() - self.start_time,
            'metrics': self.metrics.copy(),
            'active_users_count': len(self.user_start_times),
            'total_processed': len(self.response_times)
        }
    
    def print_load_report(self):
        """–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –æ –Ω–∞–≥—Ä—É–∑–∫–µ"""
        report = self.get_load_report()
        
        logger.info("=" * 60)
        logger.info("üìä –û–¢–ß–ï–¢ –û –ù–ê–ì–†–£–ó–ö–ï (50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
        logger.info("=" * 60)
        logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {report['elapsed_time']:.2f} —Å–µ–∫")
        logger.info(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {report['metrics']['active_users']}")
        logger.info(f"üîÑ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {report['metrics']['requests_per_second']:.2f}")
        logger.info(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {report['metrics']['average_response_time']:.3f} —Å–µ–∫")
        logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {report['metrics']['memory_usage_mb']:.1f} –ú–ë")
        logger.info(f"üñ•Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {report['metrics']['cpu_usage_percent']:.1f}%")
        logger.info(f"üåê –°–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {report['metrics']['network_connections']}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫ –≤ –º–∏–Ω—É—Ç—É: {report['metrics']['errors_per_minute']}")
        logger.info(f"üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {report['total_processed']}")
        logger.info("=" * 60)
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
        if report['metrics']['cpu_usage_percent'] > 80:
            logger.warning("‚ö†Ô∏è  –í–´–°–û–ö–ê–Ø –ù–ê–ì–†–£–ó–ö–ê CPU!")
        if report['metrics']['memory_usage_mb'] > 1000:
            logger.warning("‚ö†Ô∏è  –í–´–°–û–ö–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò!")
        if report['metrics']['errors_per_minute'] > 10:
            logger.warning("‚ö†Ô∏è  –ú–ù–û–ì–û –û–®–ò–ë–û–ö!")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
load_monitor = LoadMonitor()

async def monitor_load_periodically():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–≥—Ä—É–∑–∫–∏"""
    while True:
        await asyncio.sleep(30)  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        load_monitor.print_load_report() 