import asyncio
import websockets
import json
from datetime import datetime
from get_balance import get_sol_balance_async
import django
import requests
import os
import sys
from author_tokens import get_all_tokens_by_address_async
from asgiref.sync import sync_to_async
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "backend.settings")
django.setup()

from mainapp.models import Token, UserDev, AdminDev


# –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
connected_clients = set()

@sync_to_async
def create_or_get_user_dev_sync(address, uri=None):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è UserDev
    """
    try:
        user_dev, created = UserDev.objects.get_or_create(
            adress=address,
            defaults={
                'whitelist': False,
                'blacklist': False,
                'ath': 0,
                'uri': uri
            }
        )
        
        if created:
            print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π UserDev: {address}")
        else:
            print(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π UserDev: {address}")
            
        return user_dev
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø–æ–ª—É—á–µ–Ω–∏–∏ UserDev: {e}")
        return None

async def create_or_get_user_dev(address, uri=None):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è UserDev
    """
    return await create_or_get_user_dev_sync(address, uri)

@sync_to_async
def create_token_sync(address, user_dev):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω —Å —Ç–∞–∫–∏–º –∞–¥—Ä–µ—Å–æ–º
        existing_token = Token.objects.filter(address=address).first()
        if existing_token:
            print(f"–¢–æ–∫–µ–Ω —Å –∞–¥—Ä–µ—Å–æ–º {address} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return existing_token
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        token = Token.objects.create(
            address=address,
            dev=user_dev,
            scam=False,
            ath=0
        )
        
        print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {address}")
        return token
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

async def create_token(address, user_dev):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    """
    return await create_token_sync(address, user_dev)

async def process_token_data(data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    """
    mint = data.get('mint', '')
    user = data.get('user', '')
    uri = data.get('uri', '')
    
    if not mint or not user:
        print("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è mint –∏–ª–∏ user")
        return None, None
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º UserDev
    user_dev = await create_or_get_user_dev(user, uri)
    if not user_dev:
        return None, None
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    token = await create_token(mint, user_dev)
    if not token:
        return None, None
    
    return user_dev, token

async def handle_client(websocket, path):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    connected_clients.add(websocket)
    
    try:
        async for message in websocket:
            try:
                data = json.loads(message)
                timestamp = datetime.now().strftime("%H:%M:%S")
                
                # –í—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ Mint –∏ User (dev)
                mint = data.get('mint', 'N/A')
                user = data.get('user', 'N/A')
                source = data.get('source', 'N/A')
                name = data.get('name', 'N/A')
                symbol = data.get('symbol', 'N/A')
                uri = data.get('uri', 'N/A')
                
                print("-"*60,"\n",f"[{timestamp}] {source} | Mint: {mint} | User: {user}")
                print(f"Name: {name}")
                print(f"Symbol: {symbol}")
                print(f"Uri: {uri}")
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å SOL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    sol_balance = await get_sol_balance_async(user)
                except:
                    sol_balance = "N/A"
                
                print(f"AuthorSOL balance: {sol_balance}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î
                user_dev, token = await process_token_data(data)
                
                if user_dev and token:
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ: UserDev={user_dev.adress}, Token={token.address}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
                
                print("-"*60)
    
            except json.JSONDecodeError:
                print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON")
                pass
                
    except websockets.exceptions.ConnectionClosed:
        pass
    finally:
        connected_clients.remove(websocket)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ localhost:9765")
    print("üìä –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–ø–∏—Å–µ–π –≤ –ë–î")
    
    # –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
    async with websockets.serve(handle_client, "localhost", 9765):
        await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
